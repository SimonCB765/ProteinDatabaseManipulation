'''
Created on 6 Dec 2011

@author: Simon Bull
'''

import scipy
from scipy.stats.mstats import mquantiles

import utilities.MySQLaccess as mysql
import utilities.file2list

def main(filesToCompare, tablesToCompare, folderCompare, databasePassword, schemaProteins, tableProteinInfo):
    
    subsetsToCompare = {}
    
    # Extract the protein information from the database.
    conn, cursor = mysql.openConnection(databasePassword, schemaProteins)
    cursor.execute('SHOW COLUMNS FROM ' + tableProteinInfo)
    proteinColumns = cursor.fetchall()
    proteinColumns = dict([(proteinColumns[i][0], i) for i in xrange(len(proteinColumns))])
    cursor = mysql.tableSELECT(cursor, '*', tableProteinInfo)
    results = cursor.fetchall()
    proteinData = {}
    for i in results:
        proteinData[i[0]] = i
    # Extract the UniProt accessions of all the tables/views in tablesToCompare.
    for i in tablesToCompare:
        cursor = mysql.tableSELECT(cursor, 'UPAccession', i)
        results = cursor.fetchall()
        subsetsToCompare[i] = [j[0] for j in results]
    mysql.closeConnection(conn, cursor)
    
    # Extract the UniProt accessions of all the files in filesToCompare.
    for i in filesToCompare:
        subsetsToCompare[i] = set(list(utilities.file2list.main(i)))
    
    #===========================================================================
    # Generate the sequence length histograms.
    #===========================================================================
    binSize = 50
    columns = ['HumanProteome']
    
    allProteinSeqLengths = {}
    for i in proteinData.keys():
        seqLen = len(proteinData[i][-1])
        if allProteinSeqLengths.has_key(seqLen):
            allProteinSeqLengths[seqLen] += 1
        else:
            allProteinSeqLengths[seqLen] = 1
    maxSeqLen = max(allProteinSeqLengths.keys())
    if maxSeqLen % binSize == 0:
        maxBin = maxSeqLen + binSize
    else:
        maxBin = ((maxSeqLen / binSize) + 1) * binSize
    histogramData = dict([(i, {'HumanProteome' : 0}) for i in range(0, maxBin + 1, binSize)])  # maxBin + 1 so that the end point (maxBin) is included in the list generated by range.
    for i in allProteinSeqLengths.keys():
        lowerBound = i / binSize
        index = lowerBound * binSize
        histogramData[index]['HumanProteome'] += allProteinSeqLengths[i]
    
    for i in subsetsToCompare.keys():
        if i in filesToCompare:
            if '/' in i:
                name = i.split('/')[-1]
            else:
                name = i.split('\\')[-1]
        else:
            name = i.split('.')[1]
        columns.append(name)
        for j in histogramData.keys():
            histogramData[j][name] = 0
        UPAccessions = subsetsToCompare[i]
        for j in UPAccessions:
            seqLen = len(proteinData[j][-1])
            lowerBound = seqLen / binSize
            index = lowerBound * binSize
            histogramData[index][name] += 1
    
    # Write the histogram data to a file.
    outputOrder = sorted(columns)
    writeTo = open(folderCompare + '/Histogram.tsv', 'w')
    writeTo.write('Bin\t')
    writeTo.write('\t'.join(outputOrder) + '\n')
    for i in sorted(histogramData.keys()):
        writeTo.write(str(i) + '\t')
        for j in outputOrder:
            writeTo.write(str(histogramData[i][j]) + '\t')
        writeTo.write('\n')
    writeTo.close()
    
    #===========================================================================
    # Generate the sequence composition box plots.
    #===========================================================================
    aminoAcids = ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'P', 'N', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y']
    sequenceCommposition = dict([(i, {}) for i in aminoAcids])
    
    # Extract the amino acid compositions for the entire human proteome.
    aminoAcidCompositions = dict([(i, []) for i in aminoAcids])
    for i in proteinData.keys():
        for j in aminoAcidCompositions:
            aminoAcidCompositions[j].append(proteinData[i][proteinColumns[j]])
    for i in aminoAcidCompositions:
        sequenceCommposition[i]['HumanProteome'] = aminoAcidCompositions[i]
    
    # Extract the information about the subsets in the files and tables/views.
    for i in subsetsToCompare.keys():
        if i in filesToCompare:
            if '/' in i:
                name = i.split('/')[-1]
            else:
                name = i.split('\\')[-1]
        else:
            name = i.split('.')[1]
        for j in aminoAcids:
            sequenceCommposition[j][name] = []
        for j in subsetsToCompare[i]:
            for k in aminoAcids:
                sequenceCommposition[k][name].append(proteinData[j][proteinColumns[k]])
    
    # Calculate the quartiles and whisker values.
    boxValues = dict([(i, {}) for i in aminoAcids])
    for i in sequenceCommposition.keys():
        for j in sequenceCommposition[i].keys():
            values = sorted(sequenceCommposition[i][j])
            maxValue = max(values)
            minValue = min(values)
            quartiles = mquantiles(values, prob=[0.25, 0.5, 0.74])
            IQR = quartiles[2] - quartiles[0]
            lowerWhisker = quartiles[1] - (IQR * 1.5)
            lowerWhisker = max(lowerWhisker, minValue)
            upperWhisker = quartiles[2] + (IQR * 1.5)
            upperWhisker = min(upperWhisker, maxValue) 
            boxValues[i][j] = {'LowerWhisker' : lowerWhisker, 'Q1' : quartiles[0], 'Median' : quartiles[1],
                               'Q3' : quartiles[2], 'UpperWhisker' : upperWhisker, 'Mean' : scipy.mean(values)}
    
    # Write the boxplot data to a file.
    outputOrder = sorted(columns)
    valueOrder = ['Mean', 'LowerWhisker', 'Q1', 'Median', 'Q3', 'UpperWhisker']
    writeTo = open(folderCompare + '/BoxPlot.tsv', 'w')
    writeTo.write('AminoAcid\t')
    writeTo.write('\t\t\t\t\t\t'.join(outputOrder) + '\n')
    for i in outputOrder:
        writeTo.write('\t' + '\t'.join(valueOrder))
    writeTo.write('\n')
    for i in sorted(boxValues.keys()):
        writeTo.write(str(i) + '\t')
        for j in outputOrder:
            for k in valueOrder:
                writeTo.write(str(boxValues[i][j][k]) + '\t')
        writeTo.write('\n')
    writeTo.close()